# Include{groups}
portals: {}
questions:
# Include{global}
# Include{controller}
# Include{replicas}
# Include{replica1}
# Include{controllerExpertExtraArgs}
  - variable: env
    group: App Configuration
    label: Image Environment
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: GENERATE_NEW_SAVE
          label: Generate new save on startup
          description: Generate a new save if one does not exist before starting the server
          schema:
            type: boolean
            default: false
        - variable: LOAD_LATEST_SAVE
          label: Load latest save game
          description: Load latest when true. Otherwise load SAVE_NAME
          schema:
            type: boolean
            default: true
        - variable: SAVE_NAME
          label: Game save name (change this to use multiple saves)
          description: Name to use for the save file
          schema:
            type: string
            default: _autosave1
        - variable: TOKEN
          label: Factorio.com Token
          description: Import your factorio.com token
          schema:
            type: string
            default: ""
        - variable: UPDATE_MODS_ON_START
          label: Update server mods BEFORE starting the server
          description: If mods should be updated before starting the server
          schema:
            type: string
            default: ""
        - variable: USERNAME
          label: Factorio.com Username
          description: Import your factorio.com username
          schema:
            type: string
            default: ""
# Include{containerConfig}
# Include{serviceRoot}
        - variable: main
          label: Main Service
          description: The Primary service on which the healthcheck runs, often the webUI
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelectorLoadBalancer}
# Include{serviceSelectorExtras}
                    - variable: main
                      label: Main Service Port Configuration
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: Port
                            description: UDP port the server listens on
                            schema:
                              type: int
                              default: 34197
                              required: true
        - variable: rcon
          label: Rcon Port
          description: TCP port the rcon server listens on
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelectorLoadBalancer}
# Include{serviceSelectorExtras}
                    - variable: rcon
                      label: Rcon Server Service Port Configuration
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: Port
                            description: This port exposes the container port on the service
                            schema:
                              type: int
                              default: 27015
                              required: true
# Include{serviceExpertRoot}
            default: false
# Include{serviceExpert}
# Include{serviceList}
# Include{persistenceRoot}
        - variable: path
          label: path Storage
          description: Container Path factorio
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceList}
# Include{ingressRoot}
        - variable: main
          label: Main Ingress
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{ingressDefault}
# Include{ingressTLS}
# Include{ingressTraefik}
# Include{ingressList}
# Include{security}
# Include{securityContextAdvancedRoot}
              - variable: privileged
                label: Privileged mode
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: ReadOnly Root Filesystem
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: Allow Privilege Escalation
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: runAsNonRoot
                schema:
                  type: boolean
                  default: false
# Include{podSecurityContextRoot}
        - variable: runAsUser
          label: runAsUser
          description: The UserID of the user running the application
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: runAsGroup
          description: The groupID this App of the user running the application
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: fsGroup
          description: The group that should own ALL storage.
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}
# Include{resources}
# Include{advanced}
# Include{addons}
# Include{codeserver}
# Include{vpn}
# Include{documentation}
